{"version":3,"sources":["data/covid-2019-automated.csv","components/Tooltip.jsx","helpers/getData.js","components/Map.jsx","components/NationalityTally.jsx","components/LoadingWrapper.jsx","components/AgeBars.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tooltip","x","y","info","width","height","className","caseNumber","gender","status","name","clusterGroup","countriesISO2JSON","require","checkDischarge","patient","currentDate","DateTime","local","toISO","dischargeDate","hasDischarge","fromISO","isValid","toMillis","getCountryCode","country","ind","Object","values","findIndex","d","includes","keys","geoJSON","COLOURS","discharged","treated","dead","STATUS_LABEL","getPoints","data","map","posLocationCoord","lat","long","length","confirmedDate","DEATH_DATE","getStatus","CASE_NUMBER","GENDER","age","AGE","nationality","NATIONALITY","CLUSTER_LOCATION_NAME","key","PLACE_OF_STAY","colour","Map","useState","tooltip","setTooltip","mapRef","useRef","projection","d3","center","rotate","parallels","scale","geoGenerator","circles","p","fill","onMouseOver","onMouseOut","clusters","clusterData","clusterCoord","id","getCluster","uniqueLocationID","Set","CLUSTER_LOCATION_ID","shift","l","singleCase","filter","caseCount","CLUSTER_LOCATION_LAT","CLUSTER_LOCATION_LONG","getClusterLocations","clusterPoints","c","transform","stroke","opacity","useEffect","current","selectAll","attr","Math","random","transition","duration","mapPaths","features","properties","Name","viewBox","ref","NationalityTally","summary","n","count","countryCode","getNationalitySummary","s","alt","src","LoadingWrapper","loading","children","AgeBars","dataByAge","label","min","max","ageGroup","dataInGroup","latestDate","genderSplit","female","male","other","treatmentSplit","treatment","maxBy","groupDataByAge","style","backgroundColor","App","setData","date","setDate","setDelayedQueryDate","useCallback","throttle","value","csvData","then","parseInt","fromFormat","CONFIRMED_DATE","toISODate","DISCHARGE_DATE","POS_LOCATION_LAT","POS_LOCATION_LONG","days","milliseconds","firstDate","lastDate","diff","toObject","getDatesAndDuration","filteredData","latest","getNumberOfDischarged","deaths","getNumberOfDeaths","cases","getNumberOfCases","imported","IMPORTED","getNumberOfImportedCases","type","onChange","e","target","gridTemplateColumns","Array","i","toFormat","round","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2cf4cca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-2019-automated.40fac804.csv\";","import React from \"react\";\n\nconst Tooltip = ({ x, y, info }) => {\n    if (!info) return null;\n    return (\n        <foreignObject x={x} y={y + 40} width=\"100\" height=\"500\">\n            <div className={\"tooltip\"}>\n                <p className={\"tooltip_text\"}>Case number: <b>{info.caseNumber}</b></p>\n                <p className={\"tooltip_text\"}>Gender: <b>{info.gender}</b></p>\n                <p className={\"tooltip_text\"}>Status: <b>{info.status}</b></p>\n                <p className={\"tooltip_text\"}>Place of stay: <b>{info.name}</b></p>\n                <p className={\"tooltip_text\"}>Cluster relation: <b>{info.clusterGroup}</b></p>\n            </div>\n        </foreignObject>\n    );\n};\n\nexport default Tooltip;","import { DateTime } from \"luxon\";\nimport { maxBy } from \"lodash\";\n\n// load countries / iso2 json - from http://country.io/names.json\nconst countriesISO2JSON = require(\"../data/country-ISO2.json\");\n\nconst processData = (rawData) => {\n    const processedData = rawData.map(d => {\n        return {\n            ...d,\n            caseNumber: parseInt(d.CASE_NUMBER),\n            confirmedDate: DateTime.fromFormat(d.CONFIRMED_DATE, \"d MMMM yy\").toISODate(),\n            dischargeDate: DateTime.fromFormat(d.DISCHARGE_DATE, \"d MMMM yy\").toISODate(),\n            age: parseInt(d.AGE),\n            posLocationCoord: [d.POS_LOCATION_LAT, d.POS_LOCATION_LONG],\n        };\n    });\n\n    return processedData;\n}\n\n// get number of confirmed cases reported\nconst getNumberOfCases = (data) => data.length;\n\n// get number of cases discharged / recovered\nconst getNumberOfDischarged = (data) => {\n    const latest = data[data.length - 1].confirmedDate;\n    return data.filter(d => checkDischarge(d, latest)).length;\n}\n\nconst getNumberOfDeaths = (data) => data.filter(d => d.DEATH_DATE !== \"NA\").length;\n\nconst getNumberOfImportedCases = data => data.filter(d => d.IMPORTED === \"TRUE\").length;\n\n// get the breakdown by nationality\nconst getNationalitySummary = (data) => {\n    const allNationalities = [...new Set(data.map(d => d.NATIONALITY))];\n\n    return allNationalities.map(n => {\n        const count = data.filter(d => d.NATIONALITY === n).length;\n        return { nationality: n, key: n, count, countryCode: getCountryCode(n) };\n    });\n};\n\n// unique cluster locations \nconst getClusterLocations = (data) => {\n    const uniqueLocationID = [...new Set(data.map(d => d.CLUSTER_LOCATION_ID))];\n    // drop the first as it's undefined\n    uniqueLocationID.shift();\n\n    return uniqueLocationID.map(l => {\n        const singleCase = data.filter(d => d.CLUSTER_LOCATION_ID === l)[0];\n        const caseCount = data.filter(d => d.CLUSTER_LOCATION_ID === l).length;\n        const { CLUSTER_LOCATION_NAME,\n            CLUSTER_LOCATION_ID,\n            CLUSTER_LOCATION_LAT,\n            CLUSTER_LOCATION_LONG } = singleCase;\n        return {\n            name: CLUSTER_LOCATION_NAME,\n            id: CLUSTER_LOCATION_ID,\n            caseCount,\n            clusterCoord: [CLUSTER_LOCATION_LAT, CLUSTER_LOCATION_LONG],\n        };\n    })\n};\n\nconst checkDischarge = (patient, currentDate = DateTime.local().toISO()) => {\n    const { dischargeDate } = patient;\n    const hasDischarge = DateTime.fromISO(dischargeDate).isValid;\n    if (!hasDischarge) return false;\n    // check current date\n    if (DateTime.fromISO(dischargeDate).toMillis() <=\n        DateTime.fromISO(currentDate).toMillis()) return true;\n    return false;\n};\n\nconst getCountryCode = (country) => {\n    if (country === \"Singapore PR\") return \"sg\";\n    const ind = Object.values(countriesISO2JSON).findIndex(d => d.includes(country));\n    return Object.keys(countriesISO2JSON)[ind];\n}\n\n// calcualte number of days from patient zero\nconst getDatesAndDuration = (data) => {\n\n    if (data.length === 0) return { days: 1, milliseconds: 10000, firstDate: null, lastDate: null };\n    const firstDate = DateTime.fromISO(data[0].confirmedDate);\n    const lastDate = DateTime.fromISO(data[data.length - 1].confirmedDate);\n\n    const { days } = lastDate.diff(firstDate, \"days\").toObject();\n    const { milliseconds } = lastDate.diff(firstDate, \"milliseconds\").toObject();\n    return {\n        days,\n        milliseconds,\n        firstDate: firstDate.toMillis(),\n        lastDate: lastDate.toMillis(),\n\n    };\n};\n\nconst groupDataByAge = (data) => {\n    const AGE_GROUP_BRACKETS = [\n        {\n            label: \"80 +\",\n            min: 80,\n            max: 100\n        },\n        {\n            label: \"70 - 79\",\n            min: 70,\n            max: 79\n        },\n        {\n            label: \"60 - 69\",\n            min: 60,\n            max: 69,\n        },\n        {\n            label: \"50 - 59\",\n            min: 50,\n            max: 59,\n        },\n        {\n            label: \"40 - 49\",\n            min: 40,\n            max: 49,\n        },\n        {\n            label: \"30 - 39\",\n            min: 30,\n            max: 39,\n        },\n        {\n            label: \"20 - 29\",\n            min: 20,\n            max: 29,\n        },\n        {\n            label: \"0 - 19\",\n            min: 0,\n            max: 19\n        },\n    ];\n\n    const dataByAge = AGE_GROUP_BRACKETS.map(ageGroup => {\n        const { min, max } = ageGroup;\n        const dataInGroup = data.filter(d => d.age >= min && d.age <= max);\n        const latestDate = data[data.length - 1].confirmedDate;\n        return {\n            ...ageGroup,\n            count: dataInGroup.length,\n            genderSplit: {\n                female: dataInGroup.filter(d => d.GENDER === \"Female\"),\n                male: dataInGroup.filter(d => d.GENDER === \"Male\"),\n                other: dataInGroup.filter(d => d.GENDER !== \"Female\" && d.GENDER !== \"Male\"),\n            },\n            treatmentSplit: {\n                discharged: dataInGroup.filter(d => checkDischarge(d, latestDate)).length,\n                treatment: dataInGroup.filter(d => !checkDischarge(d, latestDate)).length,\n            },\n        };\n    });\n\n    // return max out of all the groups for calculating widths\n    const { count } = maxBy(dataByAge, \"count\");\n    return { max: count, dataByAge };\n}\n\nexport {\n    processData,\n    getNumberOfCases,\n    getNumberOfDischarged,\n    getNumberOfDeaths,\n    getNumberOfImportedCases,\n\n    checkDischarge,\n\n    getNationalitySummary,\n\n    getClusterLocations,\n\n    getDatesAndDuration,\n\n    groupDataByAge,\n};\n\n","import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip.jsx\";\nimport { getClusterLocations, checkDischarge } from \"../helpers/getData\";\n\nconst geoJSON = require(\"../data/national-map-polygon-geojson.json\");\n\nconst WIDTH = 575;\nconst HEIGHT = 450;\n\nexport const COLOURS = {\n    discharged: \"#37db63\",\n    treated: \"#ff3b3b\",\n    dead: \"black\",\n};\n\nconst STATUS_LABEL = {\n    discharged: \"Discharged\",\n    dead: \"Passed away\",\n    treated: \"In treatment\",\n};\n\nconst getStatus = (patient, data) => {\n\n    const isDischarged = checkDischarge(patient, data[data.length - 1].confirmedDate);\n    if (isDischarged) return \"discharged\";\n    const isDead = patient.DEATH_DATE !== \"NA\";\n    if (isDead) return \"dead\";\n    return \"treated\";\n};\n\n// get points of stay -\nconst getPoints = (data) => {\n    const points = data.map(d => {\n        const [lat, long] = d.posLocationCoord;\n        const status = getStatus(d, data);\n        return {\n            caseNumber: d.CASE_NUMBER,\n            gender: d.GENDER,\n            age: d.AGE,\n            nationality: d.NATIONALITY,\n            clusterGroup: d.CLUSTER_LOCATION_NAME,\n            status: STATUS_LABEL[status],\n            key: d.CASE_NUMBER,\n            name: d.PLACE_OF_STAY ? d.PLACE_OF_STAY : \"Unknown\",\n            lat,\n            long,\n            colour: COLOURS[status],\n        };\n    });\n    return points;\n}\n\n// get cluster\nconst getCluster = (clusterData) => {\n    const clusterLocations = clusterData.map(d => {\n        const [lat, long] = d.clusterCoord;\n        return {\n            ...d,\n            key: d.id,\n            lat,\n            long,\n            colour: \"#423c6d\",\n        };\n    });\n    return clusterLocations;\n};\n\n// map of singapore\nconst Map = ({ data }) => {\n\n    const [tooltip, setTooltip] = useState(false);\n    const mapRef = useRef(null);\n\n    // create projection + generator\n    const projection = d3.geoAlbers()\n        .center([105, 1.3])\n        .rotate([1.03, 0])\n        .parallels([0, 5])\n        .scale(70000);\n\n    const geoGenerator = d3.geoPath()\n        .projection(projection);\n\n    // for annotating points of place of stay for each case\n    const points = getPoints(data);\n\n    const circles = points.map(p => <circle key={p.key}\n        className={\"circle\"}\n        fill={p.colour}\n        onMouseOver={() => setTooltip(p)}\n        onMouseOut={() => setTooltip(false)} />);\n\n    // for annotating points of cluster location\n    const clusterData = getClusterLocations(data);\n    const clusters = getCluster(clusterData);\n    const clusterPoints = clusters.map(c => <path d=\"\n    M 0.000 3.000\n    L 2.939 4.045\n    L 2.853 0.927\n    L 4.755 -1.545\n    L 1.763 -2.427\n    L 0.000 -5.000\n    L -1.763 -2.427\n    L -4.755 -1.545\n    L -2.853 0.927\n    L -2.939 4.045\n    L 0.000 3.000\n    \"\n        transform={`translate(${projection([c.long, c.lat])[0] || 10}, \n    ${projection([c.long, c.lat])[1] || 10})`}\n        className={\"clusterPoint\"}\n        key={c.key}\n        fill={\"none\"} stroke={\"purple\"} opacity={0} />);\n\n    // update circles when data changes\n\n\n    // when it updates, do the transition\n    useEffect(() => {\n        const transitionPoints = () => {\n            d3.select(mapRef.current)\n                .selectAll(\"circle\")\n                .data(getPoints(data))\n                .attr(\"cx\", d => projection([d.long, d.lat])[0] + Math.random() * 3 || 10)\n                .attr(\"cy\", d => projection([d.long, d.lat])[1] + Math.random() * 3 || 10)\n                .transition()\n                .duration(1000)\n                .attr(\"r\", 3);\n\n            d3.select(mapRef.current)\n                .selectAll(\".clusterPoint\")\n                .data(clusters)\n                .transition()\n                .duration(1000)\n                .attr(\"opacity\", 1);\n        };\n        transitionPoints();\n    }, [data]);\n\n    const mapPaths = geoJSON.features.map(d =>\n        <path key={d.properties.Name} d={geoGenerator(d)} fill={\"white\"} stroke=\"none\"></path>);\n\n    return (\n        <svg className={\"sgp-map\"} viewBox={`0 0 ${WIDTH} ${HEIGHT}`} ref={mapRef}>\n            <g transform={\"rotate(4.5) \"}>\n                {mapPaths}\n                {circles}\n                {clusterPoints}\n            </g>\n            <Tooltip x={projection([tooltip.long, tooltip.lat])[0] || 10}\n                y={projection([tooltip.long, tooltip.lat])[1] || 10} info={tooltip} />\n        </svg>\n    );\n\n};\n\nexport default Map;","import React from \"react\";\nimport { getNationalitySummary } from \"../helpers/getData\";\n\nconst NationalityTally = ({ data }) => {\n    const summary = getNationalitySummary(data);\n    return (\n        <div className={\"nationalityTallyContainer\"}>\n            {summary.map(s => <div className={\"tallyItem\"} key={s.key}>\n                <img alt={s.countryCode}\n                    src={`https://www.countryflags.io/${s.countryCode}/shiny/24.png`} />\n                <div>{s.count}</div>\n            </div>)}\n        </div>\n    )\n};\n\nexport default NationalityTally;","import React from \"react\";\n\nconst LoadingWrapper = ({ loading, children }) => (loading ?\n    <div className={\"loadingContainer\"}>LOADING...</div> : children);\n\nexport default LoadingWrapper;","import React from \"react\";\nimport { groupDataByAge } from \"../helpers/getData\";\nimport { COLOURS } from \"./Map\";\n\n// ages bars that show which ones\nconst AgeBars = ({ data }) => {\n\n    // sort data into age groups \n    const { dataByAge, max } = groupDataByAge(data);\n\n    return (\n        <div className=\"ageBarChart\">\n            <div className=\"ageBarChart__label\">\n                {dataByAge.map(d => <div key={`${d.label}_label`}>{d.label}</div>)}\n            </div>\n            <div>\n                {dataByAge.map(d =>\n                    <div key={d.label} className=\"barGroup\">\n                        <div className=\"ageBar \" key={d.label}\n                            style={{\n                                width: `${d.treatmentSplit.treatment / max * 100}%`,\n                                backgroundColor: COLOURS.treated\n                            }} />\n                        <div className={\"ageBar discharged\"} style={{\n                            width: `${d.treatmentSplit.discharged / max * 100}%`,\n                            backgroundColor: COLOURS.discharged\n                        }} />\n                    </div>)}\n            </div>\n        </div>\n    );\n\n\n\n\n};\n\nexport default AgeBars;","import React, { useEffect, useState, useCallback } from 'react';\nimport { throttle } from \"lodash\";\nimport { DateTime } from \"luxon\";\nimport './App.css';\nimport Map from \"./components/Map\";\n\nimport * as d3 from \"d3\";\nimport csvData from \"./data/covid-2019-automated.csv\";\nimport {\n  processData, getNumberOfCases, getNumberOfDischarged,\n  getDatesAndDuration, getNumberOfDeaths, getNumberOfImportedCases\n} from \"./helpers/getData\";\nimport NationalityTally from './components/NationalityTally';\nimport LoadingWrapper from \"./components/LoadingWrapper\";\nimport AgeBars from './components/AgeBars';\n\nconst title = \"COVID-2019 - SGP\";\n\nconst App = () => {\n\n  // const [progress, reset] = useAnimation(1000);\n  // const [anim, setAnim] = useState(false);\n  // const [startTime, setStartTime] = useState(Date.now());\n\n  // set data to render\n  const [data, setData] = useState([]);\n  // set date to show (cumulative)\n  const [date, setDate] = useState(DateTime.local().toMillis());\n\n  const setDelayedQueryDate = useCallback(throttle(value => setDate(value), 500), []);\n\n  // component did mount \n  useEffect(() => {\n    d3.csv(csvData).then(d => {\n      setData(processData(d));\n    });\n  }, []);\n\n  const { firstDate, lastDate, days,\n    // milliseconds \n  } = getDatesAndDuration(data);\n\n  // useEffect(() => {\n  //   let queuedFrame;\n  //   const frame = () => {\n  //     const now = Date.now() - startTime;\n  //     // if the dates is less than the last date, then keep moving forward\n  //     if (now <= milliseconds && anim) {\n  //       queuedFrame = requestAnimationFrame(frame);\n  //     }\n  //     console.log(\"now\", now);\n  //     setDate(parseInt(date) + now * 50000);\n\n  //     if (date + now * 50000 >= lastDate) {\n  //       cancelAnimationFrame(queuedFrame);\n  //       setAnim(false);\n  //     }\n  //     // setAnim(now < milliseconds);\n  //   };\n  //   frame();\n\n  //   return () => cancelAnimationFrame(queuedFrame);\n  // }, [anim]);\n\n  // const onPlay = () => {\n  //   if (date >= lastDate) {\n  //     setDate(firstDate);\n\n  //   }\n  //   setStartTime(Date.now());\n  //   // start animation\n  //   setAnim(!anim);\n  // }\n\n  // const reset = () => setAnim(false);\n\n  if (data.length === 0) return <div className={\"AppContainer\"}>LOADING...</div>;\n\n  // filter data by latest date\n  const filteredData = data.filter(d => DateTime.fromISO(d.confirmedDate).toMillis() <= date);\n\n  const discharged = getNumberOfDischarged(filteredData);\n  const deaths = getNumberOfDeaths(filteredData);\n  const cases = getNumberOfCases(filteredData);\n  const imported = getNumberOfImportedCases(filteredData);\n\n  // change slider\n  const onChangeSlider = (e) => {\n    const { value } = e.target;\n    setDelayedQueryDate(value);\n  }\n\n  return (\n    <div className=\"AppContainer\">\n      <div className=\"overlay\">\n        <div className={\"container\"}>\n          <LoadingWrapper loading={data.length === 0}>\n            <div className=\"header\">\n              <h2>{title}</h2>\n            </div>\n            <div className={\"content\"}>\n              <Map data={filteredData} />\n              <div className=\"dateSliderGroup\">\n                <input className={\"dateSlider\"}\n                  type=\"range\"\n                  onChange={onChangeSlider}\n                  min={firstDate}\n                  max={lastDate}\n                  value={date} />\n                <div className={\"dateSliderTicks\"} style={{ gridTemplateColumns: `repeat(${days}, 1fr)` }}>\n                  {\n                    [...new Array(days)].map((d, i) => <div key={`day_${i}`} className={\"dayTicks\"}>\n                    </div>)\n                  }\n                </div>\n              </div>\n              {/* <div className=\"playButton\" onClick={onPlay}>\n                &#9654;\n              </div> */}\n            </div>\n            <div className={\"right\"}>\n              <div className=\"caseText\">\n                <h2 className={\"date\"}>{DateTime.fromISO(filteredData[filteredData.length - 1].confirmedDate).toFormat(\"dd MMM yy\")}</h2>\n                <h3 className={\"cases\"}>Cases: {cases}</h3>\n                <h3 className={\"treatment\"}>In treatment: {cases - discharged - deaths}</h3>\n                <h3 className={\"discharged\"}>Discharged: {discharged}</h3>\n                <h3 className=\"deaths\">Deaths: {deaths}</h3>\n                <h3> {imported} imported ({Math.round(imported / cases * 100)}%) </h3>\n              </div>\n              <NationalityTally data={filteredData} />\n              <AgeBars data={filteredData} />\n            </div>\n            <div className={\"footer\"}>\n              <div>\n                Points on the map are rough estimates of locations and may not be exact. <br />\n                Points that do not have a place of stay / or unknown are located on the top left.\n              </div>\n              This is still under construction / a work in progress.\n              Created by a concerned human.\n              Sources come from Wikipedia, background picture comes from\n          <a href=\"https://www.newscientist.com/article/2231453-new-coronavirus-may-be-much-more-contagious-than-initially-thought\">\n                New Scientist.\n          </a>\n              Map created using geoJSON from Data.gov.sg.\n            </div>\n          </LoadingWrapper>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}