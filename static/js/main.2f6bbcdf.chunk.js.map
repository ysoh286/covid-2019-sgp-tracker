{"version":3,"sources":["data/ncovid-2019-sgp.csv","components/Tooltip.jsx","data/getData.js","components/Map.jsx","components/NationalityTally.jsx","components/LoadingWrapper.jsx","components/AgeBars.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tooltip","x","y","info","width","height","className","caseNumber","gender","status","name","clusterGroup","splitCoordinates","coordinates","split","map","l","parseFloat","undefined","getCountryCode","country","geoJSON","require","COLOURS","getPoints","data","d","posLocationCoord","lat","long","isDischarged","patient","currentDate","DateTime","local","toISO","dischargeDate","hasDischarge","fromISO","isValid","toMillis","checkDischarge","length","confirmedDate","CASE_NUMBER","GENDER","age","AGE","nationality","NATIONALITY","CLUSTER_LOCATION_NAME","key","PLACE_OF_STAY","colour","Map","useState","tooltip","setTooltip","mapRef","useRef","projection","d3","center","rotate","parallels","scale","geoGenerator","circles","p","fill","onMouseOver","onMouseOut","clusters","clusterData","clusterCoord","id","getCluster","uniqueLocationID","Set","CLUSTER_LOCATION_ID","shift","singleCase","filter","caseCount","CLUSTER_LOCATION_COORD","getClusterLocations","clusterPoints","c","transform","stroke","opacity","useEffect","current","selectAll","attr","Math","random","transition","duration","mapPaths","features","properties","Name","viewBox","ref","NationalityTally","summary","n","count","countryCode","getNationalitySummary","s","alt","src","LoadingWrapper","loading","children","AgeBars","dataByAge","label","min","max","ageGroup","dataInGroup","genderSplit","female","male","other","treatmentSplit","discharged","treatment","maxBy","groupDataByAge","style","App","setData","date","setDate","setDelayedQueryDate","useCallback","throttle","value","csvData","then","parseInt","fromFormat","CONFIRMED_DATE","toISODate","DISCHARGE_DATE","POS_LOCATION_COORD","firstDate","lastDate","days","diff","toObject","milliseconds","getDatesAndDuration","filteredData","getNumberOfDischarged","cases","getNumberOfCases","type","onChange","e","target","toFormat","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f6bbcdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ncovid-2019-sgp.2e5e8603.csv\";","import React from \"react\";\n\nconst Tooltip = ({ x, y, info }) => {\n    if (!info) return null;\n    return (\n        <foreignObject x={x} y={y + 10} width=\"150\" height=\"400\">\n            <div className={\"tooltip\"}>\n                <p className={\"tooltip_text\"}>Case number: <b>{info.caseNumber}</b></p>\n                <p className={\"tooltip_text\"}>Gender: <b>{info.gender}</b></p>\n                <p className={\"tooltip_text\"}>Status: <b>{info.status}</b></p>\n                <p className={\"tooltip_text\"}>Place of stay: <b>{info.name}</b></p>\n                <p className={\"tooltip_text\"}>Cluster relation: <b>{info.clusterGroup}</b></p>\n            </div>\n        </foreignObject>\n    );\n};\n\nexport default Tooltip;","import { DateTime } from \"luxon\";\nimport { maxBy } from \"lodash\";\n\nconst processData = (rawData) => {\n    const processedData = rawData.map(d => {\n        return {\n            ...d,\n            caseNumber: parseInt(d.CASE_NUMBER),\n            confirmedDate: DateTime.fromFormat(d.CONFIRMED_DATE, \"d-MMM-yy\").toISODate(),\n            dischargeDate: DateTime.fromFormat(d.DISCHARGE_DATE, \"d-MMM-yy\").toISODate(),\n            age: parseInt(d.AGE),\n            posLocationCoord: splitCoordinates(d.POS_LOCATION_COORD),\n        };\n    });\n\n    return processedData;\n}\n\n// split geolocation coordinates as string into arr of numbers\nconst splitCoordinates = (coordinates) => {\n    const coordArr = coordinates.split(\",\")\n        .map(l => l ? parseFloat(l) : undefined);\n    return coordArr;\n};\n\n// get number of confirmed cases reported\nconst getNumberOfCases = (data) => data.length;\n\n// get number of cases discharged / recovered\nconst getNumberOfDischarged = (data) => data.filter(d => d.DISCHARGE_DATE).length;\n\n// get the breakdown by nationality\nconst getNationalitySummary = (data) => {\n    const allNationalities = [...new Set(data.map(d => d.NATIONALITY))];\n\n    return allNationalities.map(n => {\n        const count = data.filter(d => d.NATIONALITY === n).length;\n        return { nationality: n, key: n, count, countryCode: getCountryCode(n) };\n    });\n};\n\n// unique cluster locations \nconst getClusterLocations = (data) => {\n    const uniqueLocationID = [...new Set(data.map(d => d.CLUSTER_LOCATION_ID))];\n    // drop the first as it's undefined\n    uniqueLocationID.shift();\n\n    return uniqueLocationID.map(l => {\n        const singleCase = data.filter(d => d.CLUSTER_LOCATION_ID === l)[0];\n        const caseCount = data.filter(d => d.CLUSTER_LOCATION_ID === l).length;\n        const { CLUSTER_LOCATION_NAME,\n            CLUSTER_LOCATION_ID,\n            CLUSTER_LOCATION_COORD } = singleCase;\n        return {\n            name: CLUSTER_LOCATION_NAME,\n            id: CLUSTER_LOCATION_ID,\n            caseCount,\n            clusterCoord: splitCoordinates(CLUSTER_LOCATION_COORD),\n        };\n    })\n};\n\nconst checkDischarge = (patient, currentDate = DateTime.local().toISO()) => {\n    const { dischargeDate } = patient;\n    const hasDischarge = DateTime.fromISO(dischargeDate).isValid;\n    if (!hasDischarge) return false;\n    // check current date\n    if (DateTime.fromISO(dischargeDate).toMillis() <=\n        DateTime.fromISO(currentDate).toMillis()) return true;\n    return false;\n};\n\nconst getCountryCode = (country) => {\n    switch (country) {\n        case \"Singapore\":\n            return \"sg\";\n        case \"Singapore PR\":\n            return \"sg\";\n        case \"Bangladesh\":\n            return \"bd\";\n        case \"China\":\n            return \"cn\";\n        case \"India\":\n            return \"in\";\n        case \"Malaysia\":\n            return \"my\";\n        case \"Indonesia\":\n            return \"id\";\n        case \"Philippines\":\n            return \"ph\";\n        default:\n            return \"sg\";\n    }\n}\n\n// calcualte number of days from patient zero\nconst getDatesAndDuration = (data) => {\n    const firstDate = DateTime.fromISO(data[0].confirmedDate);\n    const lastDate = DateTime.fromISO(data[data.length - 1].confirmedDate);\n\n    const { days } = lastDate.diff(firstDate, \"days\").toObject();\n    const { milliseconds } = lastDate.diff(firstDate, \"milliseconds\").toObject();\n    return {\n        days,\n        milliseconds,\n        firstDate: firstDate.toMillis(),\n        lastDate: lastDate.toMillis(),\n\n    };\n};\n\nconst groupDataByAge = (data) => {\n    const AGE_GROUP_BRACKETS = [\n        {\n            label: \"90 +\",\n            min: 90,\n            max: 100\n        },\n        {\n            label: \"80 - 89\",\n            min: 80,\n            max: 89,\n        },\n        {\n            label: \"70 - 79\",\n            min: 70,\n            max: 79\n        },\n        {\n            label: \"60 - 69\",\n            min: 60,\n            max: 69,\n        },\n        {\n            label: \"50 - 59\",\n            min: 50,\n            max: 59,\n        },\n        {\n            label: \"40 - 49\",\n            min: 40,\n            max: 49,\n        },\n        {\n            label: \"30 - 39\",\n            min: 30,\n            max: 39,\n        },\n        {\n            label: \"20 - 29\",\n            min: 20,\n            max: 29,\n        },\n        {\n            label: \"0 - 19\",\n            min: 0,\n            max: 19\n        },\n    ];\n\n    const dataByAge = AGE_GROUP_BRACKETS.map(ageGroup => {\n        const { min, max } = ageGroup;\n        const dataInGroup = data.filter(d => d.age >= min && d.age <= max);\n        return {\n            ...ageGroup,\n            count: dataInGroup.length,\n            genderSplit: {\n                female: dataInGroup.filter(d => d.gender === \"Female\"),\n                male: dataInGroup.filter(d => d.gender === \"Male\"),\n                other: dataInGroup.filter(d => d.gender !== \"Female\" && d.gender !== \"Male\"),\n            },\n            treatmentSplit: {\n                discharged: dataInGroup.filter(d => d.dischargeDate).length,\n                treatment: dataInGroup.filter(d => !d.dischargeDate).length,\n            },\n        };\n    });\n\n    // return max out of all the groups for calculating widths\n    const { count } = maxBy(dataByAge, \"count\");\n    return { max: count, dataByAge };\n}\n\nexport {\n    processData,\n    getNumberOfCases,\n    getNumberOfDischarged,\n    checkDischarge,\n\n    getNationalitySummary,\n\n    getClusterLocations,\n\n    getDatesAndDuration,\n\n    groupDataByAge,\n};\n\n","import React, { useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip.jsx\";\nimport { getClusterLocations, checkDischarge } from \"../data/getData\";\n\nconst geoJSON = require(\"../data/national-map-polygon-geojson.json\");\n\nconst WIDTH = 700;\nconst HEIGHT = 450;\n\nconst COLOURS = {\n    discharged: \"#37db63\",\n    treated: \"#ff3b3b\",\n    dead: \"black\",\n};\n\n// get points of stay -\nconst getPoints = (data) => {\n    const points = data.map(d => {\n        const [lat, long] = d.posLocationCoord;\n        const isDischarged = checkDischarge(d, data[data.length - 1].confirmedDate);\n        return {\n            caseNumber: d.CASE_NUMBER,\n            gender: d.GENDER,\n            age: d.AGE,\n            nationality: d.NATIONALITY,\n            clusterGroup: d.CLUSTER_LOCATION_NAME,\n            status:  isDischarged ? \n            \"Discharged\" : \"In treatment\",\n            key: d.CASE_NUMBER,\n            name: d.PLACE_OF_STAY ? d.PLACE_OF_STAY : \"Unknown\",\n            lat,\n            long,\n            colour: isDischarged ? COLOURS.discharged : COLOURS.treated,\n        };\n    });\n    return points;\n}\n\n// get cluster\nconst getCluster = (clusterData) => {\n    const clusterLocations = clusterData.map(d => {\n        const [lat, long] = d.clusterCoord;\n        return {\n            ...d,\n            key: d.id,\n            lat,\n            long,\n            colour: \"#423c6d\",\n        };\n    });\n    return clusterLocations;\n};\n\n// map of singapore\nconst Map = ({ data }) => {\n\n    const [tooltip, setTooltip] = useState(false);\n    const mapRef = useRef(null);\n\n    // create projection + generator\n    const projection = d3.geoAlbers()\n        .center([105, 1.3])\n        .rotate([1.03, 0])\n        .parallels([0, 5])\n        .scale(70000);\n\n    const geoGenerator = d3.geoPath()\n        .projection(projection);\n\n    // for annotating points of place of stay for each case\n    const points = getPoints(data);\n\n    const circles = points.map(p => <circle key={p.key}\n        className={\"circle\"}\n        fill={p.colour}\n        onMouseOver={() => setTooltip(p)}\n        onMouseOut={() => setTooltip(false)} />);\n\n    // for annotating points of cluster location\n    const clusterData = getClusterLocations(data);\n    const clusters = getCluster(clusterData);\n    const clusterPoints = clusters.map(c => <path  d=\"\n    M 0.000 3.000\n    L 2.939 4.045\n    L 2.853 0.927\n    L 4.755 -1.545\n    L 1.763 -2.427\n    L 0.000 -5.000\n    L -1.763 -2.427\n    L -4.755 -1.545\n    L -2.853 0.927\n    L -2.939 4.045\n    L 0.000 3.000\n    \"\n    transform={`translate(${projection([c.long, c.lat])[0] || 10}, \n    ${projection([c.long, c.lat])[1] || 10})`}\n    className={\"clusterPoint\"}\n    key={c.key}\n    fill={\"none\"} stroke={\"purple\"} opacity={0} />);\n\n    // update circles when data changes\n\n\n    // when it updates, do the transition\n    useEffect(() => {\n        const transitionPoints = () => {\n            d3.select(mapRef.current)\n                .selectAll(\"circle\")\n                .data(getPoints(data))\n                .attr(\"cx\", d => projection([d.long, d.lat])[0] + Math.random() * 3 || 10)\n                .attr(\"cy\", d => projection([d.long, d.lat])[1] + Math.random() * 3 || 10)\n                .transition()\n                .duration(2000)\n                .attr(\"r\", 3);\n\n            d3.select(mapRef.current)\n                .selectAll(\".clusterPoint\")\n                .data(clusters)\n                .transition()\n                .duration(2000)\n                .attr(\"opacity\", 1);\n        };\n        transitionPoints();\n    }, [data]);\n\n    const mapPaths = geoJSON.features.map(d =>\n        <path key={d.properties.Name} d={geoGenerator(d)} fill={\"white\"} stroke=\"none\"></path>);\n\n    return (\n        <svg className={\"sgp-map\"} viewBox={`0 0 ${WIDTH} ${HEIGHT}`} ref={mapRef}>\n            <g transform={\"rotate(4.5) \"}>\n                {mapPaths}\n                {circles}\n                {clusterPoints}\n            </g>\n            <Tooltip x={projection([tooltip.long, tooltip.lat])[0] || 10}\n                y={projection([tooltip.long, tooltip.lat])[1] || 10} info={tooltip} />\n        </svg>\n    );\n\n};\n\nexport default Map;","import React from \"react\";\nimport { getNationalitySummary } from \"../data/getData\";\n\nconst NationalityTally = ({ data }) => {\n    const summary = getNationalitySummary(data);\n    return (\n        <div className={\"nationalityTallyContainer\"}>\n            {summary.map(s => <div className={\"tallyItem\"} key={s.key}>\n                <img alt={s.countryCode}\n                    src={`https://www.countryflags.io/${s.countryCode}/shiny/24.png`} />\n                <div>{s.count}</div>\n            </div>)}\n        </div>\n    )\n};\n\nexport default NationalityTally;","import React from \"react\";\n\nconst LoadingWrapper = ({ loading, children }) => (loading ?\n    <div className={\"loadingContainer\"}>LOADING...</div> : children);\n\nexport default LoadingWrapper;","import React from \"react\";\nimport { groupDataByAge } from \"../data/getData\";\n\n// ages bars that show which ones\nconst AgeBars = ({ data }) => {\n\n    // sort data into age groups \n    const { dataByAge, max } = groupDataByAge(data);\n\n    return (\n        <div className=\"ageBarChart\">\n            <div className=\"ageBarChart__label\">\n                {dataByAge.map(d => <div key={`${d.label}_label`}>{d.label}</div>)}\n            </div>\n            <div>\n                {dataByAge.map(d => <div className=\"ageBar\" key={d.label}\n                    style={{ width: `${d.count / max * 100}%` }} />)}\n            </div>\n        </div>\n    );\n\n\n\n\n};\n\nexport default AgeBars;","import React, { useEffect, useState, useCallback } from 'react';\nimport { throttle } from \"lodash\";\nimport { DateTime } from \"luxon\";\nimport './App.css';\nimport Map from \"./components/Map\";\n\nimport * as d3 from \"d3\";\nimport csvData from \"./data/ncovid-2019-sgp.csv\";\nimport { processData, getNumberOfCases, getNumberOfDischarged, getDatesAndDuration } from \"./data/getData\";\nimport NationalityTally from './components/NationalityTally';\nimport LoadingWrapper from \"./components/LoadingWrapper\";\nimport AgeBars from './components/AgeBars';\n\nconst title = \"NCOVID-2019 - SGP\";\n\nconst App = () => {\n\n  // set data to render\n  const [data, setData] = useState([]);\n  // set date to show (cumulative)\n  const [date, setDate] = useState(DateTime.local().toMillis());\n\n  const setDelayedQueryDate = useCallback(throttle(value => setDate(value), 500), []);\n\n  // component did mount \n  useEffect(() => {\n    d3.csv(csvData).then(d => {\n      setData(processData(d));\n    });\n  }, []);\n\n  if (data.length === 0) return <div className={\"AppContainer\"}>LOADING...</div>;\n\n\n  const { firstDate, lastDate } = getDatesAndDuration(data);\n\n  // filter data by latest date\n  const filteredData = data.filter(d => DateTime.fromISO(d.confirmedDate).toMillis() <= date);\n\n\n  const discharged = getNumberOfDischarged(filteredData);\n  const cases = getNumberOfCases(filteredData);\n\n  // change slider\n  const onChangeSlider = (e) => {\n    const { value } = e.target;\n    setDelayedQueryDate(value);\n  }\n\n  return (\n    <div className=\"AppContainer\">\n      <div className=\"overlay\">\n        <div className={\"container\"}>\n          <LoadingWrapper loading={data.length === 0}>\n            <div className=\"header\">\n              <h2>{title}</h2>\n            </div>\n            <div className={\"content\"}>\n              <Map data={filteredData} />\n              <input className={\"dateSlider\"}\n                type=\"range\"\n                onChange={onChangeSlider}\n                min={firstDate}\n                max={lastDate}\n                value={date} />\n              <div className={\"dateSliderTicks\"}>\n              </div>\n              <div>\n                Points on the map are rough estimates of locations and may not be exact. <br />\n                Points that do not have a place of stay / or unknown are located on the top left.\n              </div>\n            </div>\n            <div className={\"right\"}>\n              <h2 className={\"date\"}>{DateTime.fromISO(filteredData[filteredData.length - 1].confirmedDate).toFormat(\"dd MMM yy\")}</h2>\n              <h3 className={\"cases\"}>Cases: {cases}</h3>\n              <h3 className={\"treatment\"}>In treatment: {cases - discharged}</h3>\n              <h3 className={\"discharged\"}>Discharged: {discharged}</h3>\n              <h3 className=\"deaths\">Deaths: 0</h3>\n\n              <NationalityTally data={filteredData} />\n              <AgeBars data={filteredData} />\n            </div>\n            <div className={\"footer\"}>\n              This is still under construction / a work in progress.\n              Created by a concerned human.\n              Sources come from Wikipedia, background picture comes from\n          <a href=\"https://www.newscientist.com/article/2231453-new-coronavirus-may-be-much-more-contagious-than-initially-thought\">\n                New Scientist.\n          </a>\n              Map created using geoJSON from Data.gov.sg.\n            </div>\n          </LoadingWrapper>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}